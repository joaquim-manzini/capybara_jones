# -*- coding: utf-8 -*-
"""Capybara Jones.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17fbtHUXdSb4lVF8Dv21KzOLysxLUUO9L
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
import re
# from google.colab import userdata

# os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings
from flask import Flask
from flask import request, jsonify
from flask_cors import CORS
import json

warnings.filterwarnings("ignore")

def handle_llm_json_response(output: str):
    
    # Extract the content after </think> using regex
    json_response = None
    
    output = output.strip()
    
    json_match = re.search(r'```json(.*?)```', output, re.DOTALL)

    try:
        json_response = json.loads(json_match.group(1))
    except Exception as e:
        try:
            json_response = json.loads(output)
        except Exception as e:
            print(f"Response doesn't match JSON format: {e}")
            raise Exception(str(e))
        
    return json_response

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Agente de pesquisa --- #
##########################################
def agente_pesquisador(pais, prompt):
    agente_pesquisador = Agent(
        name="agente_pesquisador",
        model="gemini-2.0-flash",
        instruction=f"""
        Você é um pesquisador de informações turísticas no contexto do país {pais}.
        Você responderá ao usuário com informações de cidades mais visitadas ou menos visitadas
        de acordo com o desejo do usuário. Você nunca entrará em detalhes locais das cidades,
        como atrações locais, horários, etc.

        Quando o usuário solicitar exclusivamente informações locais sobre uma cidade, você **NÃO deve responder diretamente**.
        Em vez disso, você deve **retornar exatamente o seguinte JSON**:

        {{
            "fase": 2,
            "cidade": <cidade escolhida>
        }}

        Não adicione nenhum texto extra, explicações ou comentários. Apenas retorne esse JSON.""",
        tools=[google_search]
    )

    # Executa o agente
    lancamentos = call_agent(agente_pesquisador, prompt)
    return lancamentos

# agente_pesquisador("Brasil", "Quero ir para cabo frio")

##########################################
# --- Agente 2: Agente planejador --- #
##########################################
def agente_planejador(cidade_escolhida, prompt):
    agente_planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction=f"""
        Você é um planejador de atrações turísticas EXCLUSIVAMENTE na cidade de {cidade_escolhida}. Você não está autorizado a falar
        sobre nenhuma outra cidade. Se o usuário falar sobre outra cidade, sugira a ele solicitar informações ao agente pesquisador!
        Você não age como guia local, você é apenas responsável por dicas de turismo no ambiente de uma cidade escolhida pelo usuário.
        Foque em horários e características de cada lugar apresentando ao usuário opções boas para diversos contextos:
        passeios em família, passeios de aventura, ida à praia ou à montanha, atrações novas ou conhecidas, etc.

        O usuário pode pedir para ir em vários lugares, e assim você deve retornar uma lista de lugares conforme o JSON abaixo:

        Quando o usuário solicitar CONFIRMAR informações locais sobre uma cidade, você **NÃO deve responder diretamente**.
        Em vez disso, você deve **retornar exatamente o seguinte JSON**:

        {{
            "fase": 3,
            "lugares": [lista de lugares escolhidos]
        }}

        Não adicione nenhum texto extra, explicações ou comentários. Apenas retorne esse JSON.
        """,
        tools=[google_search]
    )

    # Executa o agente
    lancamentos = call_agent(agente_planejador, prompt)
    return lancamentos

# agente_planejador('Cabo Frio', "Você poderia me falar sobre alguns lugares para visitar em Cabo Frio?")

##########################################
# --- Agente 3: Agente guia --- #
##########################################
def agente_guia(cidade_escolhida, lista_atracoes, prompt):
    agente_guia = Agent(
        name="agente_guia",
        model="gemini-2.0-flash",
        instruction=f"""
        Você é um agente guia turístico. Você não pode mudar as atrações escolhidas pelo usuário. A lista
        de atrações escolhida pelo usuário é esta (em JSON): {lista_atracoes}.
        Seu trabalho é EXCLUSIVAMENTE criar um planejamento para o dia deste usuário, considere com
        cuidado se o usuário solicitar dias específicos ou preferir informações com base
        no clima e temperatura de forma
        que ele possa aproveitar o máximo possível cada atração ao mesmo tempo que
        visita um grande número de atrações. Use os horários, dias da semana, previsão do tempo,
        tudo a favor do usuário, para que ele tenha a melhor experiência possível de
        passeio na cidade em que ele está visitando: {cidade_escolhida}.

        Converse com o usuário até que ele se sinta à vontade com a programação que você criou.

        Sempre pergunta ao usuário, ao final de suas respostas, se ele deseja confirmar a programação
        pois você irá gerar um documento final para que ele imprima ou guarde no celular.

        Quando o usuário confirmar sua programação, você deve **retornar exatamente o seguinte JSON**:

        {{
            "fim": true,
            "planejamento": <lista de objetos contendo todos os passos do planejamento criado pelo agente>
        }}

        Não adicione nenhum texto extra, explicações ou comentários. Apenas retorne esse JSON.
        """,
        tools=[google_search]
    )

    # Executa o agente
    lancamentos = call_agent(agente_guia, prompt)
    return lancamentos

# agente_guia('Cabo Frio', '[\n        "Praia do Forte: Famosa por sua extensa faixa de areia branca e águas claras. Possui boa infraestrutura com quiosques, restaurantes e hotéis. Ideal para famílias e esportistas.",\n        "Forte São Mateus: Construção histórica do século XVII que oferece uma vista panorâmica do mar e das praias locais. Possui um pequeno museu com a história da região.",\n        "Bairro da Passagem: Bairro histórico com casas coloniais, bares e restaurantes que oferecem a culinária local. A igreja construída em 1701 é um destaque.",\n        "Ilha do Japonês: Ideal para um passeio de barco, oferece paisagens deslumbrantes e é perfeita para relaxar.",\n        "Praia das Dunas: Próxima ao centro, com areia branca e ondas fortes, ideal para esportes aquáticos. Boa para quem busca um lugar mais deserto e conectado com a natureza.",\n        "Rua dos Biquínis: Centro comercial com grande variedade de lojas de moda praia, ideal para compras.",\n        "Canal do Itajurú: Ótimo para um passeio de barco, onde é possível apreciar a natureza local.",\n        "Praia do Peró: Uma das poucas praias com o Certificado Bandeira Azul, que garante a qualidade de suas águas e a preservação do ambiente. Ideal para quem busca tranquilidade.",\n        "Morro do Guia: Oferece vistas panorâmicas da cidade e do mar, sendo um ótimo local para fotos."\n    ]', 'Você pode fazer uma rápida mudança no horário?')

# Exemplo simples de webserver em Python usando Flask
# Instale o Flask se necessário: !pip install flask

app = Flask(__name__)
CORS(app)
app = Flask(__name__)

@app.route('/')
@app.route('/', methods=['POST'])
def home():
    data = request.get_json()
    
    print(f"Data received: {data}")
    
    pais = data.get('pais')
    cidade = data.get('cidade')
    prompt = data.get('prompt')
    fase = data.get('fase')
    
    print(f"Fase: {fase}")
    print(f"Prompt: {prompt}")
    print(f"Pais: {pais}")
    print(f"Cidade: {cidade}")
    
    if not fase:
        return jsonify({'error': 'Missing phase'}), 400
    
    if fase == 1:
        if not pais or not prompt:
            return jsonify({'error': 'Missing parameters'}), 400
        
        result_str = agente_pesquisador(pais, prompt)
        try:
            result = handle_llm_json_response(result_str)
            
        except Exception as e:
            print(f"Error parsing JSON response: {e}")
            result = {'message': result_str}
        
    elif fase == 2:
        result = agente_planejador(cidade, prompt)
        
        try:
            result = handle_llm_json_response(result_str)
            
        except Exception as e:
            print(f"Error parsing JSON response: {e}")
            result = {'message': result_str}
            
    # elif fase == 3:
    #     result = agente_guia(pais, prompt)
    else:
        return jsonify({'error': 'Invalid phase'}), 400
    
    
    return jsonify(result)
     

if __name__ == '__main__':
    # Allow CORS for localhost:3000
    CORS(app, resources={r"/*": {"origins": "http://localhost:3000"}})
    app.run(host='0.0.0.0', port=8080, debug=True)